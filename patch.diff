diff --git a/src/main/java/com/product/error/GlobalErrorHandler.java b/src/main/java/com/product/error/GlobalErrorHandler.java
index 3018cbd..a6356e3 100644
--- a/src/main/java/com/product/error/GlobalErrorHandler.java
+++ b/src/main/java/com/product/error/GlobalErrorHandler.java
@@ -1,6 +1,8 @@
 package com.product.error;
 
-import com.product.error.exception.ProductNotFoundException;
+import com.product.exception.CustomMessageException;
+import com.product.exception.ProductNotFoundException;
+import com.product.model.ErrorResponse;
 import org.springframework.data.mapping.PropertyReferenceException;
 import org.springframework.http.HttpStatus;
 import org.springframework.http.ResponseEntity;
@@ -9,35 +11,63 @@ import org.springframework.web.bind.annotation.ExceptionHandler;
 import org.springframework.web.bind.annotation.ResponseStatus;
 import org.springframework.web.bind.annotation.RestControllerAdvice;
 
-import java.util.HashMap;
-import java.util.Map;
+import java.time.LocalDateTime;
 
 @RestControllerAdvice
 public class GlobalErrorHandler {
 
     @ExceptionHandler(ProductNotFoundException.class)
     @ResponseStatus(HttpStatus.NOT_FOUND)
-    public ResponseEntity<String> handleProductNotFoundException(ProductNotFoundException ex) {
-        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(ex.getMessage());
+    public ResponseEntity<ErrorResponse> handleProductNotFoundException(ProductNotFoundException exception) {
+        ErrorResponse response = buildResponse(
+                HttpStatus.NOT_FOUND.value(),
+                exception.getMessage()
+        );
+        return ResponseEntity.status(HttpStatus.NOT_FOUND).body(response);
     }
 
     @ExceptionHandler(org.springframework.validation.BindException.class)
     @ResponseStatus(HttpStatus.BAD_REQUEST)
-    public ResponseEntity<Map<String, String>> handleValidationExceptions(BindException exception) {
-        Map<String, String> errors = new HashMap<>();
+    public ResponseEntity<ErrorResponse> handleValidationExceptions(BindException exception) {
+        StringBuilder builder = new StringBuilder();
 
         exception.getBindingResult().getFieldErrors().forEach((error) -> {
-            String fieldName = error.getField();
             String errorMessage = error.getDefaultMessage();
-
-            errors.put(fieldName, errorMessage);
+            builder.append(errorMessage).append("\n");
         });
-        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(errors);
+
+        ErrorResponse response = buildResponse(
+                HttpStatus.BAD_REQUEST.value(),
+                builder.toString()
+        );
+        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
     }
 
     @ExceptionHandler(PropertyReferenceException.class)
     @ResponseStatus(HttpStatus.BAD_REQUEST)
-    public ResponseEntity<String> handlePropertyReferenceException(PropertyReferenceException exception) {
-        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(exception.getMessage());
+    public ResponseEntity<ErrorResponse> handlePropertyReferenceException(PropertyReferenceException exception) {
+        ErrorResponse response = buildResponse(
+                HttpStatus.BAD_REQUEST.value(),
+                exception.getMessage()
+        );
+        return ResponseEntity.status(HttpStatus.BAD_REQUEST).body(response);
+    }
+
+    @ExceptionHandler(CustomMessageException.class)
+    @ResponseStatus(HttpStatus.INTERNAL_SERVER_ERROR)
+    public ResponseEntity<ErrorResponse> handleCustomMessageException(CustomMessageException exception) {
+        ErrorResponse response = buildResponse(
+                HttpStatus.INTERNAL_SERVER_ERROR.value(),
+                exception.getMessage()
+        );
+        return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).body(response);
+    }
+
+    private ErrorResponse buildResponse(int statusCode, String message) {
+        return ErrorResponse.builder()
+                .statusCode(statusCode)
+                .message(message)
+                .dateTime(LocalDateTime.now())
+                .build();
     }
 }
\ No newline at end of file
diff --git a/src/main/java/com/product/exception/CustomMessageException.java b/src/main/java/com/product/exception/CustomMessageException.java
index 6f9de2e..5b38a0d 100644
--- a/src/main/java/com/product/exception/CustomMessageException.java
+++ b/src/main/java/com/product/exception/CustomMessageException.java
@@ -1,4 +1,4 @@
-package com.product.error.exception;
+package com.product.exception;
 
 public class CustomMessageException extends RuntimeException {
 
diff --git a/src/main/java/com/product/exception/ProductNotFoundException.java b/src/main/java/com/product/exception/ProductNotFoundException.java
index e6d43c6..e6c8372 100644
--- a/src/main/java/com/product/exception/ProductNotFoundException.java
+++ b/src/main/java/com/product/exception/ProductNotFoundException.java
@@ -1,4 +1,4 @@
-package com.product.error.exception;
+package com.product.exception;
 
 public class ProductNotFoundException extends RuntimeException {
 
diff --git a/src/main/java/com/product/http/controller/ProductController.java b/src/main/java/com/product/http/controller/ProductController.java
index 066e263..a690098 100644
--- a/src/main/java/com/product/http/controller/ProductController.java
+++ b/src/main/java/com/product/http/controller/ProductController.java
@@ -1,9 +1,9 @@
 package com.product.http.controller;
 
-import com.product.dto.CreateProductDto;
-import com.product.dto.EditProductDto;
-import com.product.dto.ReadProductDto;
-import com.product.service.ProductServiceImpl;
+import com.product.model.dto.CreateProductDto;
+import com.product.model.dto.EditProductDto;
+import com.product.model.dto.ReadProductDto;
+import com.product.service.impl.ProductServiceImpl;
 import io.swagger.v3.oas.annotations.Operation;
 import io.swagger.v3.oas.annotations.Parameter;
 import io.swagger.v3.oas.annotations.media.Schema;
@@ -23,10 +23,10 @@ import org.springframework.web.bind.annotation.PostMapping;
 import org.springframework.web.bind.annotation.PutMapping;
 import org.springframework.web.bind.annotation.RequestBody;
 import org.springframework.web.bind.annotation.RequestMapping;
-import org.springframework.web.bind.annotation.RequestParam;
 import org.springframework.web.bind.annotation.RestController;
 
 import java.util.List;
+import java.util.UUID;
 
 @RestController
 @RequiredArgsConstructor
@@ -45,7 +45,7 @@ public class ProductController {
 
     @GetMapping("/{id}")
     @Operation(summary = "Get product by id")
-    public ResponseEntity<ReadProductDto> getProduct(@PathVariable Long id) {
+    public ResponseEntity<ReadProductDto> getProduct(@PathVariable UUID id) {
         return ResponseEntity.ok(productService.getProduct(id));
     }
 
@@ -60,23 +60,10 @@ public class ProductController {
         return ResponseEntity.ok(productService.getAllProducts(pageable));
     }
 
-    @GetMapping("/filter")
-    @Operation(summary = "Search products by name filter")
-    public ResponseEntity<List<ReadProductDto>> getProductByFilter(
-            @Parameter(name = "sort", schema = @Schema(defaultValue = "name,desc"))
-            @PageableDefault(page = 0, size = 10)
-            @SortDefault(value = "name", direction = Sort.Direction.DESC)
-            Pageable pageable,
-            @Parameter(name = "name", description = "Name filter keyword")
-            @RequestParam String name
-    ) {
-        return ResponseEntity.ok(productService.getProductByFilter(name, pageable));
-    }
-
     @PutMapping("/{id}")
     @Operation(summary = "Edit product")
     public ResponseEntity<ReadProductDto> update(
-            @PathVariable Long id,
+            @PathVariable UUID id,
             @Valid @RequestBody EditProductDto product
     ) {
         return ResponseEntity.ok(productService.update(id, product));
@@ -84,7 +71,7 @@ public class ProductController {
 
     @DeleteMapping("/{id}")
     @Operation(summary = "Delete product by id")
-    public ResponseEntity<Boolean> delete(@PathVariable Long id) {
+    public ResponseEntity<Boolean> delete(@PathVariable UUID id) {
         return productService.delete(id)
                 ? ResponseEntity.noContent().build()
                 : ResponseEntity.notFound().build();
diff --git a/src/main/java/com/product/mapper/product/ProductCreateMapper.java b/src/main/java/com/product/mapper/product/ProductCreateMapper.java
index 24df8aa..95fcbac 100644
--- a/src/main/java/com/product/mapper/product/ProductCreateMapper.java
+++ b/src/main/java/com/product/mapper/product/ProductCreateMapper.java
@@ -5,7 +5,7 @@ import com.product.model.dto.CreateProductDto;
 import org.mapstruct.Mapper;
 
 @Mapper(componentModel = "spring")
-public interface CreateProductMapper {
+public interface ProductCreateMapper {
 
     Product dtoToProduct(CreateProductDto product);
 }
diff --git a/src/main/java/com/product/mapper/product/ProductReadMapper.java b/src/main/java/com/product/mapper/product/ProductReadMapper.java
index 2ed8a16..c14c4c7 100644
--- a/src/main/java/com/product/mapper/product/ProductReadMapper.java
+++ b/src/main/java/com/product/mapper/product/ProductReadMapper.java
@@ -5,7 +5,7 @@ import com.product.model.dto.ReadProductDto;
 import org.mapstruct.Mapper;
 
 @Mapper(componentModel = "spring")
-public interface ReadProductMapper {
+public interface ProductReadMapper {
 
     ReadProductDto productToDto(Product product);
 }
diff --git a/src/main/java/com/product/mapper/product/ProductUpdateMapper.java b/src/main/java/com/product/mapper/product/ProductUpdateMapper.java
index 2655ff5..e32215e 100644
--- a/src/main/java/com/product/mapper/product/ProductUpdateMapper.java
+++ b/src/main/java/com/product/mapper/product/ProductUpdateMapper.java
@@ -8,7 +8,7 @@ import org.mapstruct.MappingTarget;
 import org.mapstruct.NullValuePropertyMappingStrategy;
 
 @Mapper(componentModel = "spring")
-public interface UpdateProductMapper {
+public interface ProductUpdateMapper {
 
     @BeanMapping(nullValuePropertyMappingStrategy = NullValuePropertyMappingStrategy.IGNORE)
     Product updateProductFromDto(EditProductDto productDto, @MappingTarget Product product);
diff --git a/src/main/java/com/product/model/ErrorResponse.java b/src/main/java/com/product/model/ErrorResponse.java
index b817873..f12fd2d 100644
--- a/src/main/java/com/product/model/ErrorResponse.java
+++ b/src/main/java/com/product/model/ErrorResponse.java
@@ -1,4 +1,4 @@
-package com.product.model.dto;
+package com.product.model;
 
 import lombok.Builder;
 import lombok.Getter;
diff --git a/src/main/java/com/product/model/entity/Product.java b/src/main/java/com/product/model/entity/Product.java
index 3e0b630..fe14559 100644
--- a/src/main/java/com/product/model/entity/Product.java
+++ b/src/main/java/com/product/model/entity/Product.java
@@ -1,4 +1,4 @@
-package com.product.database.entity;
+package com.product.model.entity;
 
 import jakarta.persistence.Column;
 import jakarta.persistence.Entity;
@@ -10,6 +10,8 @@ import lombok.Getter;
 import lombok.NoArgsConstructor;
 import lombok.Setter;
 
+import java.util.UUID;
+
 @Getter
 @Setter
 @Entity
@@ -18,8 +20,8 @@ import lombok.Setter;
 public class Product {
 
     @Id
-    @GeneratedValue(strategy = GenerationType.IDENTITY)
-    private Long id;
+    @GeneratedValue(strategy = GenerationType.UUID)
+    private UUID id;
 
     @Column(name = "name", nullable = false, length = 20)
     private String name;
diff --git a/src/main/java/com/product/repository/ProductRepository.java b/src/main/java/com/product/repository/ProductRepository.java
index 3baec53..fa25d56 100644
--- a/src/main/java/com/product/repository/ProductRepository.java
+++ b/src/main/java/com/product/repository/ProductRepository.java
@@ -1,14 +1,13 @@
-package com.product.database.repository;
+package com.product.repository;
 
-import com.product.database.entity.Product;
+import com.product.model.entity.Product;
 import org.springframework.data.domain.Pageable;
 import org.springframework.data.jpa.repository.JpaRepository;
 import org.springframework.stereotype.Repository;
 
 import java.util.List;
+import java.util.UUID;
 
 @Repository
-public interface ProductRepository extends JpaRepository<Product, Long> {
-
-    List<Product> findByNameContainingIgnoreCase(String name, Pageable pageable);
+public interface ProductRepository extends JpaRepository<Product, UUID> {
 }
\ No newline at end of file
diff --git a/src/main/java/com/product/service/ProductService.java b/src/main/java/com/product/service/ProductService.java
index 74ff18d..9e9dfd5 100644
--- a/src/main/java/com/product/service/ProductService.java
+++ b/src/main/java/com/product/service/ProductService.java
@@ -1,24 +1,23 @@
 package com.product.service;
 
-import com.product.dto.CreateProductDto;
-import com.product.dto.EditProductDto;
-import com.product.dto.ReadProductDto;
-import com.product.error.exception.ProductNotFoundException;
+import com.product.model.dto.CreateProductDto;
+import com.product.model.dto.EditProductDto;
+import com.product.model.dto.ReadProductDto;
+import com.product.exception.ProductNotFoundException;
 import org.springframework.data.domain.Pageable;
 
 import java.util.List;
+import java.util.UUID;
 
 public interface ProductService {
 
     ReadProductDto create(CreateProductDto productDto);
 
-    ReadProductDto getProduct(Long id) throws ProductNotFoundException;
+    ReadProductDto getProduct(UUID id) throws ProductNotFoundException;
 
     List<ReadProductDto> getAllProducts(Pageable pageable);
 
-    List<ReadProductDto> getProductByFilter(String name, Pageable pageable);
+    ReadProductDto update(UUID id, EditProductDto productDto);
 
-    ReadProductDto update(Long id, EditProductDto productDto);
-
-    boolean delete(Long id);
+    boolean delete(UUID id);
 }
\ No newline at end of file
diff --git a/src/main/java/com/product/service/impl/ProductServiceImpl.java b/src/main/java/com/product/service/impl/ProductServiceImpl.java
index 2184d6c..3c008e8 100644
--- a/src/main/java/com/product/service/impl/ProductServiceImpl.java
+++ b/src/main/java/com/product/service/impl/ProductServiceImpl.java
@@ -1,14 +1,15 @@
-package com.product.service;
+package com.product.service.impl;
 
-import com.product.database.repository.ProductRepository;
+import com.product.mapper.product.ProductCreateMapper;
+import com.product.repository.ProductRepository;
 import com.product.model.dto.CreateProductDto;
 import com.product.model.dto.EditProductDto;
 import com.product.model.dto.ReadProductDto;
-import com.product.error.exception.CustomMessageException;
-import com.product.error.exception.ProductNotFoundException;
-import com.product.mapper.product.CreateProductMapper;
-import com.product.mapper.product.ReadProductMapper;
-import com.product.mapper.product.UpdateProductMapper;
+import com.product.exception.CustomMessageException;
+import com.product.exception.ProductNotFoundException;
+import com.product.mapper.product.ProductReadMapper;
+import com.product.mapper.product.ProductUpdateMapper;
+import com.product.service.ProductService;
 import lombok.RequiredArgsConstructor;
 import org.springframework.data.domain.Pageable;
 import org.springframework.stereotype.Service;
@@ -16,9 +17,10 @@ import org.springframework.transaction.annotation.Transactional;
 
 import java.util.List;
 import java.util.Optional;
+import java.util.UUID;
 
-import static com.product.error.constants.ErrorMessageConstants.PRODUCT_NOT_FOUND_MESSAGE;
-import static com.product.error.constants.ErrorMessageConstants.PRODUCT_CREATION_ERROR;
+import static com.product.util.constants.ErrorMessageConstants.PRODUCT_NOT_FOUND_MESSAGE;
+import static com.product.util.constants.ErrorMessageConstants.PRODUCT_CREATION_ERROR;
 
 @Service
 @Transactional(readOnly = true)
@@ -27,54 +29,47 @@ public class ProductServiceImpl implements ProductService {
 
     private final ProductRepository productRepository;
     
-    private final ReadProductMapper readProductMapper; 
-    private final CreateProductMapper createProductMapper;
-    private final UpdateProductMapper updateProductMapper;
+    private final ProductReadMapper productReadMapper;
+    private final ProductCreateMapper productCreateMapper;
+    private final ProductUpdateMapper productUpdateMapper;
 
     @Transactional
     @Override
     public ReadProductDto create(CreateProductDto productDto) {
         return Optional.of(productDto)
-                .map(createProductMapper::dtoToProduct)
+                .map(productCreateMapper::dtoToProduct)
                 .map(productRepository::saveAndFlush)
-                .map(readProductMapper::productToDto)
+                .map(productReadMapper::productToDto)
                 .orElseThrow(() -> new CustomMessageException(PRODUCT_CREATION_ERROR));
     }
 
     @Override
-    public ReadProductDto getProduct(Long id)  {
+    public ReadProductDto getProduct(UUID id)  {
         return productRepository.findById(id)
-                .map(readProductMapper::productToDto)
+                .map(productReadMapper::productToDto)
                 .orElseThrow(() -> new ProductNotFoundException(String.format(PRODUCT_NOT_FOUND_MESSAGE, id)));
     }
 
     @Override
     public List<ReadProductDto> getAllProducts(Pageable pageable) {
         return productRepository.findAll(pageable).stream()
-                .map(readProductMapper::productToDto)
-                .toList();
-    }
-
-    @Override
-    public List<ReadProductDto> getProductByFilter(String name, Pageable pageable) {
-        return productRepository.findByNameContainingIgnoreCase(name, pageable).stream()
-                .map(readProductMapper::productToDto)
+                .map(productReadMapper::productToDto)
                 .toList();
     }
 
     @Transactional
     @Override
-    public ReadProductDto update(Long id, EditProductDto productDto) {
+    public ReadProductDto update(UUID id, EditProductDto productDto) {
         return productRepository.findById(id)
-                .map(product -> updateProductMapper.updateProductFromDto(productDto, product))
+                .map(product -> productUpdateMapper.updateProductFromDto(productDto, product))
                 .map(productRepository::saveAndFlush)
-                .map(readProductMapper::productToDto)
+                .map(productReadMapper::productToDto)
                 .orElseThrow(() -> new ProductNotFoundException(String.format(PRODUCT_NOT_FOUND_MESSAGE, id)));
     }
 
     @Transactional
     @Override
-    public boolean delete(Long id) {
+    public boolean delete(UUID id) {
         return productRepository.findById(id)
                 .map(product -> {
                     productRepository.deleteById(id);
diff --git a/src/main/java/com/product/util/constants/ErrorMessageConstants.java b/src/main/java/com/product/util/constants/ErrorMessageConstants.java
index cba03f0..f7a6929 100644
--- a/src/main/java/com/product/util/constants/ErrorMessageConstants.java
+++ b/src/main/java/com/product/util/constants/ErrorMessageConstants.java
@@ -1,4 +1,4 @@
-package com.product.error.constants;
+package com.product.util.constants;
 
 import lombok.experimental.UtilityClass;
 
